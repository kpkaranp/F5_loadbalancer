import os
import re
import sys
import base64
from github import Github


# Read arguments from system
if len(sys.argv) < 5:
    print("Usage: python tfe_module_update.py <repo_list.txt> <file_path> <old_version> <new_version>")
    sys.exit(1)

repo_list_file = sys.argv[1]  # File containing repo names (one per line)
file_path = sys.argv[2]  # Path to Terraform file in repo
old_version = sys.argv[3]  # Old version string
new_version = sys.argv[4]  # New version string

# GitHub Token (Store in environment variable)
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")

if not GITHUB_TOKEN:
    print("ERROR: Missing GITHUB_TOKEN. Set it using export GITHUB_TOKEN=your_token")
    sys.exit(1)

# Authenticate with GitHub
github = Github(base_url=GITHUB_ENTERPRISE_URL, login_or_token=GITHUB_TOKEN)

# Read repository names from file
with open(repo_list_file, "r") as file:
    repos = [line.strip() for line in file if line.strip()]

for repo_name in repos:
    try:
        print(f"\nProcessing repo: {repo_name}")
        repo = github.get_repo(repo_name)

        # Get the file contents
        file = repo.get_contents(file_path)
        file_content = base64.b64decode(file.content).decode("utf-8")

        # Debug logs
        print(f"Checking in {repo_name}/{file_path}...")
        print(f"Old Version: {old_version}")
        print(f"New Version: {new_version}")
        print("File Content (first 300 characters):")
        print(file_content[:300])  # Print first 300 characters for verification

        # Check if version exists in file
        if old_version in file_content:
            print(f"Found '{old_version}' in {repo_name}/{file_path}, updating...")

            # Use regex to avoid partial replacements
            new_content = re.sub(rf"\b{re.escape(old_version)}\b", new_version, file_content)

            # Commit the change
            repo.update_file(
                file_path,
                f"Update Terraform version from {old_version} to {new_version}",
                new_content,
                file.sha
            )
            print(f"✅ Updated {repo_name}/{file_path} successfully.")

        else:
            print(f"⚠ No changes needed in {repo_name}/{file_path}. '{old_version}' not found.")

    except Exception as e:
        print(f"❌ Failed to update {repo_name}: {e}")
